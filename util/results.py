from pandas import DataFrame
from datetime import datetime as dt
import os
from typing import Callable

"""
Convenience functions for presenting and saving results.
"""

def save_and_plot(
        results: dict[str, DataFrame], 
        dir: str = 'results',
        do_with_dir_fn: Callable[[str], None] = None,
        df_mod_fn: Callable[[DataFrame], DataFrame] = None, 
        plot_fn: Callable[[str, str, DataFrame], None] = None
    ) -> None:
    """
    Saves results into a folder based on current time, and invokes the plot function (if available) into the folder.

    Required arguments:
    * results:dict[str, DataFrame], results generated by Runner.run_all_threaded()
     
    Optional arguments:
    * dir:str, parent results folder. Default: 'results'
    * do_with_dir_fn:(dir: str) -> None, function is called once the directory is created, and the absolute path is passed as a parameter. Default: None
    * df_mod_fn:(df: DataFrame) -> DataFrame, callable function that will apply modifications to each result DataFrame, and return the result. Default: None 
    * plot_fn:(save_dir: str, filesafe_name: str, df: DataFrame) -> None, callable function that will plot graph(s) and save them into the provided directory. Default: None
    * dir:str, parent results folder. Default: 'results'
    """
    # Make folder
    folder_path = os.path.join(dir, dt.now().strftime("%d%b%y-%H.%M.%S"))
    os.makedirs(folder_path, exist_ok=True)

    if do_with_dir_fn is not None:
        print(f"(!) Calling additional directory function...")
        do_with_dir_fn(os.path.abspath(folder_path))
        print(f"(!) Directory function complete.")
    
    print(f"(!) Saving results to {folder_path}...")
    for exp_dir, df in results.items():
        # convert directory into filesafe name
        filesafe_name = exp_dir.replace(os.path.sep, "_")
        
        # modify DataFrame (if available)
        if df_mod_fn is not None:
            df = df_mod_fn(df)

        # save results into csv
        df.to_csv(os.path.join(folder_path, f"{filesafe_name}_results.csv"))

        # plot (if available)
        if plot_fn is not None:
            plot_fn(folder_path, filesafe_name, df)

        print(f"- Saved results for {exp_dir}.")
    print(f"(!) Saved {len(results)} result(s) into {folder_path}.")